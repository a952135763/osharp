// -----------------------------------------------------------------------
// <auto-generated>
//    此代码由代码生成器生成。
//    手动更改此文件可能导致应用程序出现意外的行为。
//    如果重新生成代码，对此文件的任何修改都会丢失。
//    如果需要扩展此类，可以遵守如下规则进行扩展：
//      1. 横向扩展：如需给当前模块添加方法接口，可新建文件“IMerchantContract.cs”的分部接口“public partial interface IMerchantContract”添加方法，并添加相应新的分部基类 abstract partial class MerchantServiceBase 实现新方法
// </auto-generated>
//
//  <copyright file="IMerchantContract.generated.cs">
//      KaPai©2019 Microsoft Corporation. All rights reserved. 
//  </copyright>
//  <site></site>
//  <last-editor>KaPai</last-editor>
// -----------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

using OSharp.Data;
using OSharp.Extensions;

using KaPai.Pay.Merchant.Dtos;
using KaPai.Pay.Merchant.Entities;


namespace KaPai.Pay.Merchant
{
    /// <summary>
    /// 业务契约接口：商户模块
    /// </summary>
    public partial interface IMerchantContract
    {
        #region 商户订单列表信息业务

        /// <summary>
        /// 获取 商户订单列表信息查询数据集
        /// </summary>
        IQueryable<Orders> Orderses { get; }

        /// <summary>
        /// 检查商户订单列表信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的商户订单列表信息编号</param>
        /// <returns>商户订单列表信息是否存在</returns>
        Task<bool> CheckOrdersExists(Expression<Func<Orders, bool>> predicate, Guid id = default(Guid));
        
        #endregion
        
        #region 商户实时余额信息业务

        /// <summary>
        /// 获取 商户实时余额信息查询数据集
        /// </summary>
        IQueryable<Amounts> Amountses { get; }

        /// <summary>
        /// 检查商户实时余额信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的商户实时余额信息编号</param>
        /// <returns>商户实时余额信息是否存在</returns>
        Task<bool> CheckAmountsExists(Expression<Func<Amounts, bool>> predicate, Guid id = default(Guid));
            
        /// <summary>
        /// 更新商户实时余额信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的商户实时余额信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> UpdateAmountses(params AmountsInputDto[] dtos);
    
        #endregion
        
        #region 余额变动记录信息业务

        /// <summary>
        /// 获取 余额变动记录信息查询数据集
        /// </summary>
        IQueryable<AmountsLog> AmountsLogs { get; }

        /// <summary>
        /// 检查余额变动记录信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的余额变动记录信息编号</param>
        /// <returns>余额变动记录信息是否存在</returns>
        Task<bool> CheckAmountsLogExists(Expression<Func<AmountsLog, bool>> predicate, Guid id = default(Guid));
        
        #endregion
        
        #region 商户参数信息业务

        /// <summary>
        /// 获取 商户参数信息查询数据集
        /// </summary>
        IQueryable<MerchantExtra> MerchantExtras { get; }

        /// <summary>
        /// 检查商户参数信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的商户参数信息编号</param>
        /// <returns>商户参数信息是否存在</returns>
        Task<bool> CheckMerchantExtraExists(Expression<Func<MerchantExtra, bool>> predicate, Guid id = default(Guid));
            
        /// <summary>
        /// 更新商户参数信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的商户参数信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> UpdateMerchantExtras(params MerchantExtraInputDto[] dtos);
    
        #endregion
        
        #region 订单回调记录信息业务

        /// <summary>
        /// 获取 订单回调记录信息查询数据集
        /// </summary>
        IQueryable<OrderBackLog> OrderBackLogs { get; }

        /// <summary>
        /// 检查订单回调记录信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的订单回调记录信息编号</param>
        /// <returns>订单回调记录信息是否存在</returns>
        Task<bool> CheckOrderBackLogExists(Expression<Func<OrderBackLog, bool>> predicate, Guid id = default(Guid));
                
        /// <summary>
        /// 删除订单回调记录信息信息
        /// </summary>
        /// <param name="ids">要删除的订单回调记录信息编号</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> DeleteOrderBackLogs(params Guid[] ids);
        

        #endregion
        
    }
}
