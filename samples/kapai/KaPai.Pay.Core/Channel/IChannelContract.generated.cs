// -----------------------------------------------------------------------
// <auto-generated>
//    此代码由代码生成器生成。
//    手动更改此文件可能导致应用程序出现意外的行为。
//    如果重新生成代码，对此文件的任何修改都会丢失。
//    如果需要扩展此类，可以遵守如下规则进行扩展：
//      1. 横向扩展：如需给当前模块添加方法接口，可新建文件“IChannelContract.cs”的分部接口“public partial interface IChannelContract”添加方法，并添加相应新的分部基类 abstract partial class ChannelServiceBase 实现新方法
// </auto-generated>
//
//  <copyright file="IChannelContract.generated.cs">
//      KaPai©2019 Microsoft Corporation. All rights reserved. 
//  </copyright>
//  <site></site>
//  <last-editor>KaPai</last-editor>
// -----------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

using OSharp.Data;
using OSharp.Extensions;

using KaPai.Pay.Channel.Dtos;
using KaPai.Pay.Channel.Entities;


namespace KaPai.Pay.Channel
{
    /// <summary>
    /// 业务契约接口：通道模块
    /// </summary>
    public partial interface IChannelContract
    {
        #region 通道列表信息业务

        /// <summary>
        /// 获取 通道列表信息查询数据集
        /// </summary>
        IQueryable<Channels> Channelses { get; }

        /// <summary>
        /// 检查通道列表信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的通道列表信息编号</param>
        /// <returns>通道列表信息是否存在</returns>
        Task<bool> CheckChannelsExists(Expression<Func<Channels, bool>> predicate, Guid id = default(Guid));
        
        /// <summary>
        /// 添加通道列表信息信息
        /// </summary>
        /// <param name="dtos">要添加的通道列表信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> CreateChannelses(params ChannelsInputDto[] dtos);
            
        /// <summary>
        /// 更新通道列表信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的通道列表信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> UpdateChannelses(params ChannelsInputDto[] dtos);
    
        #endregion
        
        #region 费率列表信息业务

        /// <summary>
        /// 获取 费率列表信息查询数据集
        /// </summary>
        IQueryable<Percentage> Percentages { get; }

        /// <summary>
        /// 检查费率列表信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的费率列表信息编号</param>
        /// <returns>费率列表信息是否存在</returns>
        Task<bool> CheckPercentageExists(Expression<Func<Percentage, bool>> predicate, Guid id = default(Guid));
        
        /// <summary>
        /// 添加费率列表信息信息
        /// </summary>
        /// <param name="dtos">要添加的费率列表信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> CreatePercentages(params PercentageInputDto[] dtos);
            
        /// <summary>
        /// 更新费率列表信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的费率列表信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> UpdatePercentages(params PercentageInputDto[] dtos);
    
        #endregion
        
        #region 用户开启通道信息业务

        /// <summary>
        /// 获取 用户开启通道信息查询数据集
        /// </summary>
        IQueryable<UserChannel> UserChannels { get; }

        /// <summary>
        /// 检查用户开启通道信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的用户开启通道信息编号</param>
        /// <returns>用户开启通道信息是否存在</returns>
        Task<bool> CheckUserChannelExists(Expression<Func<UserChannel, bool>> predicate, Guid id = default(Guid));
        
        /// <summary>
        /// 添加用户开启通道信息信息
        /// </summary>
        /// <param name="dtos">要添加的用户开启通道信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> CreateUserChannels(params UserChannelInputDto[] dtos);
            
        /// <summary>
        /// 更新用户开启通道信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的用户开启通道信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> UpdateUserChannels(params UserChannelInputDto[] dtos);
    
        #endregion
        
        #region 通道供应商账号类型信息业务

        /// <summary>
        /// 获取 通道供应商账号类型信息查询数据集
        /// </summary>
        IQueryable<ChannelType> ChannelTypes { get; }

        /// <summary>
        /// 检查通道供应商账号类型信息信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的通道供应商账号类型信息编号</param>
        /// <returns>通道供应商账号类型信息是否存在</returns>
        Task<bool> CheckChannelTypeExists(Expression<Func<ChannelType, bool>> predicate, Guid id = default(Guid));
        
        /// <summary>
        /// 添加通道供应商账号类型信息信息
        /// </summary>
        /// <param name="dtos">要添加的通道供应商账号类型信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> CreateChannelTypes(params ChannelTypeInputDto[] dtos);
            
        /// <summary>
        /// 更新通道供应商账号类型信息信息
        /// </summary>
        /// <param name="dtos">包含更新信息的通道供应商账号类型信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        Task<OperationResult> UpdateChannelTypes(params ChannelTypeInputDto[] dtos);
    
        #endregion
        
    }
}
